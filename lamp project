// Final Code Candidate 1


//////////////////////////////////////////////
//        RemoteXY include library          //
//////////////////////////////////////////////

// RemoteXY select connection mode and include library 
#define REMOTEXY_MODE__SOFTSERIAL
#include <SoftwareSerial.h>

#include <RemoteXY.h>

// RemoteXY connection settings 
#define REMOTEXY_SERIAL_RX 2
#define REMOTEXY_SERIAL_TX 3
#define REMOTEXY_SERIAL_SPEED 9600


// RemoteXY configurate  
#pragma pack(push, 1)
uint8_t RemoteXY_CONF[] =
  { 255,4,0,17,0,66,0,13,13,1,
  1,0,26,20,12,12,2,31,79,102,
  102,0,1,0,4,20,12,12,2,31,
  79,78,0,1,0,47,20,12,12,2,
  31,65,117,116,111,0,2,0,22,76,
  22,11,2,26,31,31,79,78,0,77,
  117,116,101,0,67,4,5,42,54,9,
  2,26,17 };
  
// this structure defines all the variables and events of your control interface 
struct {

    // input variables
  uint8_t Mode_2; // =1 if button pressed, else =0 
  uint8_t Mode_1; // =1 if button pressed, else =0 
  uint8_t Mode_3; // =1 if button pressed, else =0 
  uint8_t Buzzer; // =1 if switch ON and =0 if OFF 

    // output variables
  char Text_Box[17];  // string UTF8 end zero 

    // other variable
  uint8_t connect_flag;  // =1 if wire connected, else =0 

} RemoteXY;
#pragma pack(pop)

/////////////////////////////////////////////
//           END RemoteXY include          //
/////////////////////////////////////////////










#include <LiquidCrystal.h>
#include "pitches.h"
LiquidCrystal lcd(4,5,6,7,8,12);





const int photoPin = A0,  // Photoresistor pin
	buttonPin = A1,         // Push Button pin
	bluetoothPin1 = A2,     // Bluetooth pins
	bluetoothPin2 = A3,     //
	pirPin = A4,            // Motion Sensor pin
	indicatorPinBLUE = 9,   // Color LED pins
	indicatorPinGREEN = 10, //
	indicatorPinRED = 11,   //
	lampPin = A5,           // Lamp LED pin
	passive_buzzer = 13;    // Passive buzzer







int lampMode = 0,         // Variable for current lamp mode
	timer = 0,
	conditionaLightLevel;   // Variable for the light level to check against
  
  
  
  
  
  
unsigned long previousMillis = 0;
const long interval = 1000;






bool madeAchange = false,
	autoON = false,
	motion = true;







// Melodies for passive buzzer
int melody_on[] = {NOTE_E5, NOTE_F5, NOTE_G5},
	melody_off[] = {NOTE_G5, NOTE_F5, NOTE_E5},
	melody_auto[] = {NOTE_E5, NOTE_F5, NOTE_F5},
	melody_standby[] = {NOTE_F5, NOTE_F5, NOTE_E5};







void setup()
{
	RemoteXY_Init ();

	pinMode(buttonPin, INPUT_PULLUP);  
	pinMode(pirPin, INPUT);
	pinMode(lampPin, OUTPUT);
	pinMode(indicatorPinBLUE, OUTPUT);
	pinMode(indicatorPinGREEN, OUTPUT);
	pinMode(indicatorPinRED, OUTPUT);
	pinMode(passive_buzzer, OUTPUT);

	lcd.begin(16,2);



	// Light Level Calibration
	digitalWrite(lampPin, LOW);
  
	lcd.clear();  
	lcd.print("Turn off lights");
	lcd.setCursor(0,1);
	lcd.print("& push button");
	
	while (digitalRead(buttonPin) != LOW)
		continue;

	tone(passive_buzzer, NOTE_E5, 500);

	conditionaLightLevel = analogRead(photoPin) + (100);

	lcd.clear();
	lcd.print("Setup complete.");
	lampMode = 3;
	madeAchange = true;
  
}










void loop()
{
	RemoteXY_Handler ();
	
	unsigned long currentMillis = millis();

	performButtonChecks();
	
	if(madeAchange)
	{
		if(RemoteXY.Buzzer == 1)
		{
			soundBuzzer();
		}
		delay(500);
		updateIndicator(); 
		updateLCD();
		timer = 0;
		madeAchange = false;
	}
	
	
	
	
	
	
	if(lampMode == 3)
	{
		readLightLevel();
		readPIR();
		
		if(currentMillis - previousMillis >= interval)
		{
			previousMillis = currentMillis;
			if(autoON && !motion)
			{
				timer++;
			}
			else
			{
				timer = 0;
			}
			updateCountdown();
		}
		
	}
	
	
	
	if(lampMode == 4)
	{
    readLightLevel();
    readPIR();
    
		if (!autoON || motion)
		{
			lampMode = 3;
			madeAchange = true;
		}
	} 
	
	updateLamp();
}








void performButtonChecks()
{

  if(RemoteXY.Mode_1 != 0)
  {
    RemoteXY.Mode_1 = 0;
    lampMode = 1;
    madeAchange = true;
  }
  else if(RemoteXY.Mode_2 != 0)
  {
    RemoteXY.Mode_2 = 0;
    lampMode = 2;
    madeAchange = true;
  }
  else if(RemoteXY.Mode_3 != 0)
  {
    RemoteXY.Mode_3 = 0;
    lampMode = 3;
    madeAchange = true;
  }

  
  if(digitalRead(buttonPin) == LOW)
  {
    lampMode++;
    if(lampMode > 3)
    {
      lampMode = 1;
    }
    madeAchange = true;
  }
}










void soundBuzzer()
{
	if(lampMode == 1)
	{
		for(int thisNote = 0; thisNote < 3; thisNote++)
		{
			tone(passive_buzzer, melody_on[thisNote], 250);
			delay(250);
		}
	}
	else if(lampMode == 2)
	{
		for(int thisNote = 0; thisNote < 3; thisNote++)
		{
			tone(passive_buzzer, melody_off[thisNote], 250);
			delay(250);
		}
	}
	else if(lampMode == 3)
	{
		for(int thisNote = 0; thisNote < 3; thisNote++)
		{
			tone(passive_buzzer, melody_auto[thisNote], 250);
			delay(250);
		}
	}
	else if(lampMode == 4)
	{
		for(int thisNote = 0; thisNote < 3; thisNote++)
		{
			tone(passive_buzzer, melody_standby[thisNote], 250);
			delay(250);
		}
	}
}










void updateIndicator()
{
	if(lampMode == 1)
	{
		analogWrite(indicatorPinBLUE, LOW);
		analogWrite(indicatorPinGREEN, 50);
		analogWrite(indicatorPinRED, LOW);
	}
	else if(lampMode == 2)
	{
		analogWrite(indicatorPinBLUE, LOW);
		analogWrite(indicatorPinGREEN, LOW);
		analogWrite(indicatorPinRED, 50);
	}
	else if(lampMode == 3)
	{
		analogWrite(indicatorPinBLUE, LOW);
		analogWrite(indicatorPinGREEN, 25);
		analogWrite(indicatorPinRED, 50);
	}
	else if(lampMode == 4)
	{
		analogWrite(indicatorPinBLUE, LOW);
		analogWrite(indicatorPinGREEN, 5);
		analogWrite(indicatorPinRED, 30);
	}
}









void updateLCD()
{
	if(lampMode == 1)
	{
		lcd.clear();
		lcd.print("Mode: On");
		strcpy(RemoteXY.Text_Box, "Mode: On");
	}
	else if(lampMode == 2)
	{
		lcd.clear();
		lcd.print("Mode: Off");
		strcpy(RemoteXY.Text_Box, "Mode: Off");
	}
	else if(lampMode == 3)
	{
		lcd.clear();
		lcd.print("Mode: Auto");
		strcpy(RemoteXY.Text_Box, "Mode: Auto");
	}
	else if(lampMode == 4)
	{
		lcd.clear();
		lcd.print("Mode: Standby");
		strcpy(RemoteXY.Text_Box, "Mode: Standby");
	}
}








void updateLamp()
{
	if(lampMode == 1)
	{
		digitalWrite(lampPin, HIGH);
	}
	else if(lampMode == 2)
	{
		digitalWrite(lampPin, LOW);
	}
	else if(lampMode == 3)
	{
		if(autoON)
		{
			digitalWrite(lampPin, HIGH);
		}
		else
		{
			digitalWrite(lampPin, LOW);
		}
	}
	else if(lampMode == 4)
	{
		digitalWrite(lampPin, LOW);
	}
}







void readLightLevel()
{
	if(analogRead(photoPin) < conditionaLightLevel)
	{
		autoON = true;
	}
	else
	{
		autoON = false;
	}
}



void readPIR()
{
	if(digitalRead(pirPin) == HIGH)
	{
		motion = true;
	}
	else
	{
		motion = false;
	}
}



void updateCountdown()
{
	if(timer == 0)
	{
		lcd.setCursor(0,1);
		lcd.print("                ");
	}
	else if((timer > 0) && (timer < 15))
	{
		lcd.setCursor(0,1);
		lcd.print("No User Detected");
	}
	else if((timer >= 15) && (timer < 30))
	{
		lcd.setCursor(0,1);
		lcd.print("Standby in:    s");
		lcd.setCursor(12,1);
		lcd.print(30 - timer);
	}
	else if(timer >= 30)
	{
		lampMode = 4;
		madeAchange = true;
	}
}
