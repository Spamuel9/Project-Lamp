// CURRENT BUILD 11-18-2021
// Bluetooth was redone from scratch again, still doesn't work.
// I tested the module with the Lab 9 code again, and it works perfectly fine, so the issue is NOT the wiring nor the module itself.

//////////////////////////////////////////////
//        RemoteXY include library          //
//////////////////////////////////////////////

// RemoteXY select connection mode and include library 
#define REMOTEXY_MODE__SOFTSERIAL
#include <SoftwareSerial.h>

#include <RemoteXY.h>

// RemoteXY connection settings 
#define REMOTEXY_SERIAL_RX 2
#define REMOTEXY_SERIAL_TX 3
#define REMOTEXY_SERIAL_SPEED 9600


// RemoteXY configurate  
#pragma pack(push, 1)
uint8_t RemoteXY_CONF[] =
  { 255,4,0,11,0,66,0,13,13,1,
  1,0,26,20,12,12,2,31,79,102,
  102,0,1,0,4,20,12,12,2,31,
  79,78,0,1,0,47,20,12,12,2,
  31,65,117,116,111,0,2,0,22,82,
  22,11,2,26,31,31,79,78,0,77,
  117,116,101,0,67,5,16,43,33,11,
  2,26,11 };
  
// this structure defines all the variables and events of your control interface 
struct {

    // input variables
  uint8_t Mode_2; // =1 if button pressed, else =0 
  uint8_t Mode_1; // =1 if button pressed, else =0 
  uint8_t Mode_3; // =1 if button pressed, else =0 
  uint8_t Buzzer; // =1 if switch ON and =0 if OFF 

    // output variables
  char text_1[11];  // string UTF8 end zero 

    // other variable
  uint8_t connect_flag;  // =1 if wire connected, else =0 

} RemoteXY;
#pragma pack(pop)

/////////////////////////////////////////////
//           END RemoteXY include          //
/////////////////////////////////////////////










#include <LiquidCrystal.h>
#include "pitches.h"
LiquidCrystal lcd(4,5,6,7,8,12);



const int photoPin = A0,  // Photoresistor pin
  buttonPin = A1,         // Push Button pin
  bluetoothPin1 = A2,     // Bluetooth pins
  bluetoothPin2 = A3,     //
  // irPin = A5,             // IR Remote Receiver pin
  pirPin = A4,            // Motion Sensor pin
  indicatorPinBLUE = 9,   // Color LED pins
  indicatorPinGREEN = 10, //
  indicatorPinRED = 11,   //
  lampPin = A5,           // Lamp LED pin
  passive_buzzer = 13;    // Passive buzzer



int lampMode = 0,         // Variable for current lamp mode
  timer,                  // Variable for the no-motion timer
  conditionaLightLevel;   // Variable for the light level to check against

bool madeAchange = false;


// Melodies for passive buzzer
int melody_on[] = {NOTE_E5, NOTE_F5, NOTE_G5},
    melody_off[] = {NOTE_G5, NOTE_F5, NOTE_E5},
    melody_auto[] = {NOTE_E5, NOTE_F5, NOTE_F5},
    melody_standby[] = {NOTE_F5, NOTE_F5, NOTE_E5};



void setup()
{
  RemoteXY_Init ();


  // Defining pin modes (To Do: Color LED pins, Bluetooth Pins)
  pinMode(buttonPin, INPUT_PULLUP);  
  pinMode(pirPin, INPUT);
  pinMode(lampPin, OUTPUT);
  pinMode(indicatorPinBLUE, OUTPUT);
  pinMode(indicatorPinGREEN, OUTPUT);
  pinMode(indicatorPinRED, OUTPUT);
  pinMode(passive_buzzer, OUTPUT);

  // To Do: Turn on Color LED (White maybe?) for setup for accurate reading from photoresistor

  // Beginning LCD and running setup message
  lcd.begin(16,2);
  lcd.setCursor(0,0);  
  lcd.print("Turn off lights");
  lcd.setCursor(0,1);
  lcd.print("& press a button");

  // Run button Checks until a button is pressed (lampMode initialized at 0)
  while (lampMode == 0)
    performButtonChecks();

  // Getting conditional light level
  digitalWrite(lampPin, HIGH);
  tone(passive_buzzer, NOTE_B5, 500);
  delay(100);
  conditionaLightLevel = analogRead(photoPin) + (50);
  delay(100);
  digitalWrite(lampPin, LOW);

  // Displaying confirmation message, setting lampMode to Auto, delay 1 second
  lcd.clear();
  lcd.print("Setup complete.");
  lampMode = 3;
  delay(1000);
}



void loop()
{

  RemoteXY_Handler ();








  
  while (lampMode == 1)
  {
    if(madeAchange)
    {
      for(int thisNote = 0; thisNote < 3; thisNote++)
      {
        tone(passive_buzzer, melody_on[thisNote], 200);
        delay(200);
      }
      
      analogWrite(indicatorPinBLUE, LOW);
      analogWrite(indicatorPinGREEN, 50);
      analogWrite(indicatorPinRED, LOW); 

      lcd.clear();
      lcd.print("Mode: On");    
      digitalWrite(lampPin, HIGH);
      madeAchange = false;
    }
    
    performButtonChecks();
  }














  while (lampMode == 2)
  {
    if(madeAchange)
    {
      for(int thisNote = 0; thisNote < 3; thisNote++)
      {
        tone(passive_buzzer, melody_off[thisNote], 200);
        delay(200);
      }
      
      analogWrite(indicatorPinBLUE, LOW);
      analogWrite(indicatorPinGREEN, LOW);
      analogWrite(indicatorPinRED, 50);


    
      lcd.clear();
      lcd.print("Mode: Off");
      digitalWrite(lampPin, LOW);
      
      madeAchange = false;
    }
    
    performButtonChecks();
  }













  while (lampMode == 3)
  {
    if(madeAchange)
    {
      for(int thisNote = 0; thisNote < 3; thisNote++)
      {
        tone(passive_buzzer, melody_auto[thisNote], 200);
        delay(200);
      }
      
      analogWrite(indicatorPinBLUE, LOW);
      analogWrite(indicatorPinGREEN, 25);
      analogWrite(indicatorPinRED, 50); 
      madeAchange = false;
    }
    lcd.clear();
    lcd.print("Mode: Auto");
    
    if (analogRead(photoPin) < conditionaLightLevel)
    {
      digitalWrite(lampPin, HIGH);  
      
      if (digitalRead(pirPin) == LOW)
      {
        
        lcd.setCursor(0,1);
        lcd.print("                ");
        lcd.setCursor(0,1);
        lcd.print("No User Detected");
        
        timer = 0;
        while ( ( (timer < 31) && (analogRead(photoPin) < conditionaLightLevel) ) && ( (digitalRead(pirPin) == LOW) && (lampMode == 3) ) )
        {
          // Serial.println(timer);
          if( (timer >= 10) && (timer < 15 ) )
          {
            lcd.setCursor(0,1);
            lcd.print("                ");
            lcd.setCursor(0,1);
            lcd.print("No User Detected");
          }
          
          else if (timer >= 15)
          {
            lcd.setCursor(0,0);
            lcd.print("Standby in:");
            lcd.setCursor(0,1);
            lcd.print("    seconds     ");
            lcd.setCursor(0,1);
            lcd.print(30 - timer);
          }
          delay(500);
          timer++;

          performButtonChecks();
          
          if (timer >= 30)
          {
            lampMode = 4;
            madeAchange = true;
          }
          
        }
      }
    }
    else
    {
      digitalWrite(lampPin, LOW);
    }
    performButtonChecks();
  }










  while (lampMode == 4)
  {
    if(madeAchange)
    {
      for(int thisNote = 0; thisNote < 3; thisNote++)
      {
        tone(passive_buzzer, melody_standby[thisNote], 200);
        delay(200);
      }
      
      analogWrite(indicatorPinBLUE, LOW);
      analogWrite(indicatorPinGREEN, 10);
      analogWrite(indicatorPinRED, 25);
      lcd.clear();
      lcd.print("Mode: Standby");
      digitalWrite(lampPin, LOW); 
      
      madeAchange = false;
    }
    
    performButtonChecks();
    
    if ( (digitalRead(pirPin) == HIGH) || (analogRead(photoPin) > conditionaLightLevel) )
    {
      lampMode = 3;
      madeAchange = true;
    }
  }  
}




void performButtonChecks()
{

  if(RemoteXY.Mode_1 != 0)
  {
    RemoteXY.Mode_1 = 0;
    lampMode = 1;
    madeAchange = true;
  }
  else if(RemoteXY.Mode_2 != 0)
  {
    RemoteXY.Mode_2 = 0;
    lampMode = 2;
    madeAchange = true;
  }
  else if(RemoteXY.Mode_3 != 0)
  {
    RemoteXY.Mode_3 = 0;
    lampMode = 3;
    madeAchange = true;
  }

  
  if(digitalRead(buttonPin) == LOW)
  {
    lampMode++;
    if(lampMode > 3)
    {
      lampMode = 1;
    }
    madeAchange = true;
  }
  
  delay(500);
}
